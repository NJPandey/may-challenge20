class Node {
        char ch;
        boolean isTerminal;
        HashMap<Character,Node> map;
        Node (char ch) {
            this.ch = ch;
            this.isTerminal = false;
            this.map = new HashMap<>();
        }
    }

class Trie {

    /** Initialize your data structure here. */
    Node root;
    Trie () {
             root = new Node ('\0');
        }
    /** Inserts a word into the trie. */
    public void insert(String word) {
        Node cur = root ;
        for(char c : word.toCharArray()) {
            if(cur.map.containsKey(c)) {
               	 cur = cur.map.get(c);
             }
            else {
                 Node node = new Node(c);
                 cur.map.put(c,node);
                 cur = cur.map.get(c);
              }
          }
         cur.isTerminal = true;
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        Node cur = root;
        for(char c : word.toCharArray()) {
            if(cur.map.containsKey(c)) 
               cur = cur.map.get(c);
            else
                return false;
        }
        if(cur.isTerminal == true)
            return true;
        return false;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        Node cur = root;
        for(char c : prefix.toCharArray()) {
            if(cur.map.containsKey(c)) 
               cur = cur.map.get(c);
            else
                return false;
        }
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode bstFromPreorder(int[] preorder) {
       return createTree(preorder, 0, preorder.length-1);
    }
    TreeNode createTree(int[] preorder, int start, int end) {
        if(start > end) return null;
        if(start == end) return new TreeNode(preorder[start]);
        
        TreeNode root = new TreeNode(preorder[start]);
        int partition = start+1;
        while(partition <= end) {
            if(preorder[start] <= preorder[partition])
                break;
            partition++;
        }
        root.left = createTree(preorder, start+1, partition-1);
        root.right = createTree(preorder, partition , end);
        return root;
    }
}